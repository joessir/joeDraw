<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <link rel="stylesheet" href="/style.css"> 
    <title>joeDraw App</title>

</head>
<body>
    <div class="login">
        <p class="title">Welcome to joeDraw app !</p>
        <form action="" onsubmit="handleSubmit(event)">
            <p>Username : </p>
            <input type="text"><br><br>
            <button type="submit">Submit</button>
            
        </form>
    </div>
    <div class="container hide">
        <div class="left">
            <p>Current users : </p>
            <ul class="listOfUsers"></ul>
        </div>
        <div class="right">
            <canvas></canvas>
            <div class="bottom">
              
                <div class="basic-colors">
                    <div class="color" style="background : black;" onclick="drawingColor('black',this)"></div>
                    <div class="color" style="background : gray;" onclick="drawingColor('gray',this)"></div>
                    <div class="color" style="background : white;" onclick="drawingColor('white',this)"></div>
                </div>

                <div class="more-colors">
                    <div class="color" style="background : rgb(241, 36, 36);" onclick="drawingColor('rgb(241, 36, 36)',this)"></div>
                    <div class="color" style="background : orange;" onclick="drawingColor('orange',this)"></div>
                    <div class="color" style="background : yellow;" onclick="drawingColor('yellow',this)"></div>
                    <div class="color" style="background : rgb(50, 230, 50);" onclick="drawingColor('rgb(50, 230, 50)',this)"></div>
                    <div class="color" style="background : rgb(0, 106, 255);" onclick="drawingColor('rgb(0, 106, 255)',this)"></div>
                    <div class="color" style="background : cyan;" onclick="drawingColor('cyan',this)" ></div>

                </div>

            </div>
        </div>
    </div>


    <script src="/socket.io/socket.io.js"></script>
    <script >
        const socket = io();

        const input = document.querySelector("input");
        const container = document.querySelector(".container")
        const login = document.querySelector(".login")
        let username = ""
        let userList = []
        const handleSubmit = (e)=>{
                e.preventDefault()
                const emptyUser = /^\s*$/
                username = input.value
                const found = userList.some(user => user.username === username);
                if(found){
                    alert("username already exist")
                }
                else if(username.match(emptyUser)) alert("username must not be empty")
                else{
                socket.emit('addUser',username);
                document.body.style.cursor = "url(https://www.svgrepo.com/show/21828/pencil.svg),auto";
                login.classList.add("hide");
                container.classList.remove("hide");
                
                }

                input.value = ""
        }

            const canvas = document.querySelector("canvas");
            const ctx = canvas.getContext("2d");

            let color = "black"
            let lineWidth = 2
            ctx.lineWidth = lineWidth;


            const drawingColor = (c,element)=>{
                if(c == "white"){
                    lineWidth = 30
                    ctx.lineWidth = 30
                    document.body.style.cursor = "url(https://www.svgrepo.com/show/38906/eraser.svg),auto";
                }
                else{
                    lineWidth = 2
                    document.body.style.cursor = "url(https://www.svgrepo.com/show/21828/pencil.svg),auto";
                }
                color = c
                const colors = document.getElementsByClassName("color");
                for(let i = 0 ; i < colors.length ; i++){
                    colors[i].classList.remove("active")
                }
                element.classList.add("active")
            }

            canvas.width = window.innerWidth/1.4
            canvas.height = window.innerHeight/1.4

            
            socket.on('renderUser',data=>{
                userList = data
                const ul = document.querySelector("ul");
                ul.innerHTML = ''
                data.forEach(user => {
                
                const li = document.createElement("li")
                li.textContent = user.username
                ul.appendChild(li)
                });
            })
           
            socket.on('mousedown',data=>{
                if(!drawing){
                startDrawing(data.x,data.y,data.l,data.c)
                }


            })
            socket.on('mousemove',data=>{
                if(!drawing){
                ctx.lineTo(data.x,data.y)
                ctx.stroke()
                }
            })
            


            let drawing = false

            canvas.addEventListener("mousedown",e=>{

            socket.emit('mousedown',{x : e.offsetX , y : e.offsetY , c : color , l : lineWidth});
            startDrawing(e.offsetX,e.offsetY,lineWidth,color)
            drawing = true
        })
        canvas.addEventListener("mousemove",e=>{
        if(drawing) {

            socket.emit('mousemove',{x : e.offsetX , y : e.offsetY ,c : color , l : lineWidth});
            ctx.lineTo(e.offsetX,e.offsetY)
            ctx.stroke()
        }
        })
        canvas.addEventListener("mouseup",()=>{
            drawing = false
        })
        const startDrawing = (x,y,l,c)=>{
            ctx.beginPath()
            ctx.lineWidth = l
            ctx.strokeStyle = c
            ctx.moveTo(x,y)
        };
    </script>

</body>
</html>